// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: usuarioPerfil.sql

package repositoryIMPL

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUsuarioPerfil = `-- name: CreateUsuarioPerfil :one
INSERT INTO t_usuario_perfil (usuario_interno_id, usuario_externo_id, perfil_id, data_hora)
VALUES ($1, $2, $3, $4)
RETURNING id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora
`

type CreateUsuarioPerfilParams struct {
	UsuarioInternoID pgtype.Int4
	UsuarioExternoID pgtype.Int4
	PerfilID         int32
	DataHora         pgtype.Timestamp
}

func (q *Queries) CreateUsuarioPerfil(ctx context.Context, arg CreateUsuarioPerfilParams) (TUsuarioPerfil, error) {
	row := q.db.QueryRow(ctx, createUsuarioPerfil,
		arg.UsuarioInternoID,
		arg.UsuarioExternoID,
		arg.PerfilID,
		arg.DataHora,
	)
	var i TUsuarioPerfil
	err := row.Scan(
		&i.ID,
		&i.UsuarioInternoID,
		&i.UsuarioExternoID,
		&i.PerfilID,
		&i.DataHora,
	)
	return i, err
}

const deleteUsuarioPerfilById = `-- name: DeleteUsuarioPerfilById :execrows
DELETE FROM t_usuario_perfil 
WHERE id = $1 
RETURNING id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora
`

func (q *Queries) DeleteUsuarioPerfilById(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.Exec(ctx, deleteUsuarioPerfilById, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const findAllUsuarioPerfis = `-- name: FindAllUsuarioPerfis :many
SELECT id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora FROM t_usuario_perfil
`

func (q *Queries) FindAllUsuarioPerfis(ctx context.Context) ([]TUsuarioPerfil, error) {
	rows, err := q.db.Query(ctx, findAllUsuarioPerfis)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TUsuarioPerfil
	for rows.Next() {
		var i TUsuarioPerfil
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioInternoID,
			&i.UsuarioExternoID,
			&i.PerfilID,
			&i.DataHora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsuarioPerfilByID = `-- name: FindUsuarioPerfilByID :one
SELECT id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora FROM t_usuario_perfil WHERE id = $1
`

func (q *Queries) FindUsuarioPerfilByID(ctx context.Context, id int32) (TUsuarioPerfil, error) {
	row := q.db.QueryRow(ctx, findUsuarioPerfilByID, id)
	var i TUsuarioPerfil
	err := row.Scan(
		&i.ID,
		&i.UsuarioInternoID,
		&i.UsuarioExternoID,
		&i.PerfilID,
		&i.DataHora,
	)
	return i, err
}

const findUsuarioPerfilByPerfil = `-- name: FindUsuarioPerfilByPerfil :many
SELECT id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora FROM t_usuario_perfil WHERE perfil_id = $1
`

func (q *Queries) FindUsuarioPerfilByPerfil(ctx context.Context, perfilID int32) ([]TUsuarioPerfil, error) {
	rows, err := q.db.Query(ctx, findUsuarioPerfilByPerfil, perfilID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TUsuarioPerfil
	for rows.Next() {
		var i TUsuarioPerfil
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioInternoID,
			&i.UsuarioExternoID,
			&i.PerfilID,
			&i.DataHora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsuarioPerfilByUsuarioExterno = `-- name: FindUsuarioPerfilByUsuarioExterno :many
SELECT id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora FROM t_usuario_perfil WHERE usuario_externo_id = $1
`

func (q *Queries) FindUsuarioPerfilByUsuarioExterno(ctx context.Context, usuarioExternoID pgtype.Int4) ([]TUsuarioPerfil, error) {
	rows, err := q.db.Query(ctx, findUsuarioPerfilByUsuarioExterno, usuarioExternoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TUsuarioPerfil
	for rows.Next() {
		var i TUsuarioPerfil
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioInternoID,
			&i.UsuarioExternoID,
			&i.PerfilID,
			&i.DataHora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findUsuarioPerfilByUsuarioInterno = `-- name: FindUsuarioPerfilByUsuarioInterno :many
SELECT id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora FROM t_usuario_perfil WHERE usuario_interno_id = $1
`

func (q *Queries) FindUsuarioPerfilByUsuarioInterno(ctx context.Context, usuarioInternoID pgtype.Int4) ([]TUsuarioPerfil, error) {
	rows, err := q.db.Query(ctx, findUsuarioPerfilByUsuarioInterno, usuarioInternoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TUsuarioPerfil
	for rows.Next() {
		var i TUsuarioPerfil
		if err := rows.Scan(
			&i.ID,
			&i.UsuarioInternoID,
			&i.UsuarioExternoID,
			&i.PerfilID,
			&i.DataHora,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUsuarioPerfil = `-- name: UpdateUsuarioPerfil :one
UPDATE t_usuario_perfil 
SET usuario_interno_id = $1, usuario_externo_id = $2, perfil_id = $3, data_hora = $4
WHERE id = $5
RETURNING id, usuario_interno_id, usuario_externo_id, perfil_id, data_hora
`

type UpdateUsuarioPerfilParams struct {
	UsuarioInternoID pgtype.Int4
	UsuarioExternoID pgtype.Int4
	PerfilID         int32
	DataHora         pgtype.Timestamp
	ID               int32
}

func (q *Queries) UpdateUsuarioPerfil(ctx context.Context, arg UpdateUsuarioPerfilParams) (TUsuarioPerfil, error) {
	row := q.db.QueryRow(ctx, updateUsuarioPerfil,
		arg.UsuarioInternoID,
		arg.UsuarioExternoID,
		arg.PerfilID,
		arg.DataHora,
		arg.ID,
	)
	var i TUsuarioPerfil
	err := row.Scan(
		&i.ID,
		&i.UsuarioInternoID,
		&i.UsuarioExternoID,
		&i.PerfilID,
		&i.DataHora,
	)
	return i, err
}
