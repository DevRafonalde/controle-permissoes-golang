// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permissoes.sql

package repositoryIMPL

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPermissao = `-- name: CreatePermissao :one
INSERT INTO t_permissoes (nome, descricao, ativo, atualizado_em)
VALUES ($1, $2, true, NOW()) 
RETURNING id, nome, descricao, ativo, atualizado_em
`

type CreatePermissaoParams struct {
	Nome      string
	Descricao string
}

func (q *Queries) CreatePermissao(ctx context.Context, arg CreatePermissaoParams) (TPermisso, error) {
	row := q.db.QueryRow(ctx, createPermissao, arg.Nome, arg.Descricao)
	var i TPermisso
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Ativo,
		&i.AtualizadoEm,
	)
	return i, err
}

const findAllPermissoes = `-- name: FindAllPermissoes :many
SELECT id, nome, descricao, ativo, atualizado_em FROM t_permissoes WHERE id > $1 ORDER BY id LIMIT $2
`

type FindAllPermissoesParams struct {
	ID    int32
	Limit int32
}

func (q *Queries) FindAllPermissoes(ctx context.Context, arg FindAllPermissoesParams) ([]TPermisso, error) {
	rows, err := q.db.Query(ctx, findAllPermissoes, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TPermisso
	for rows.Next() {
		var i TPermisso
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Ativo,
			&i.AtualizadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPermissaoByID = `-- name: FindPermissaoByID :one
SELECT id, nome, descricao, ativo, atualizado_em FROM t_permissoes WHERE id = $1
`

func (q *Queries) FindPermissaoByID(ctx context.Context, id int32) (TPermisso, error) {
	row := q.db.QueryRow(ctx, findPermissaoByID, id)
	var i TPermisso
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Ativo,
		&i.AtualizadoEm,
	)
	return i, err
}

const findPermissaoByNome = `-- name: FindPermissaoByNome :many
SELECT id, nome, descricao, ativo, atualizado_em FROM t_permissoes WHERE nome ILIKE '%' || $1 || '%' AND id > $2 ORDER BY id LIMIT $3
`

type FindPermissaoByNomeParams struct {
	Column1 pgtype.Text
	ID      int32
	Limit   int32
}

func (q *Queries) FindPermissaoByNome(ctx context.Context, arg FindPermissaoByNomeParams) ([]TPermisso, error) {
	rows, err := q.db.Query(ctx, findPermissaoByNome, arg.Column1, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TPermisso
	for rows.Next() {
		var i TPermisso
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Ativo,
			&i.AtualizadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePermissao = `-- name: UpdatePermissao :one
UPDATE t_permissoes 
SET nome = $1, descricao = $2, ativo = $3, data_ultima_atualizacao = NOW()
WHERE id = $4
RETURNING id, nome, descricao, ativo, atualizado_em
`

type UpdatePermissaoParams struct {
	Nome      string
	Descricao string
	Ativo     pgtype.Bool
	ID        int32
}

func (q *Queries) UpdatePermissao(ctx context.Context, arg UpdatePermissaoParams) (TPermisso, error) {
	row := q.db.QueryRow(ctx, updatePermissao,
		arg.Nome,
		arg.Descricao,
		arg.Ativo,
		arg.ID,
	)
	var i TPermisso
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Ativo,
		&i.AtualizadoEm,
	)
	return i, err
}
