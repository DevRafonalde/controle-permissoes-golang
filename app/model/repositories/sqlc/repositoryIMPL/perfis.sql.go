// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: perfis.sql

package repositoryIMPL

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPerfil = `-- name: CreatePerfil :one
INSERT INTO t_perfis (nome, descricao, ativo, atualizado_em)
VALUES ($1, $2, true, NOW())
RETURNING id, nome, descricao, ativo, atualizado_em
`

type CreatePerfilParams struct {
	Nome      string
	Descricao string
}

func (q *Queries) CreatePerfil(ctx context.Context, arg CreatePerfilParams) (TPerfi, error) {
	row := q.db.QueryRow(ctx, createPerfil, arg.Nome, arg.Descricao)
	var i TPerfi
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Ativo,
		&i.AtualizadoEm,
	)
	return i, err
}

const findAllPerfis = `-- name: FindAllPerfis :many
SELECT id, nome, descricao, ativo, atualizado_em FROM t_perfis WHERE id > $1 ORDER BY id LIMIT $2
`

type FindAllPerfisParams struct {
	ID    int32
	Limit int32
}

func (q *Queries) FindAllPerfis(ctx context.Context, arg FindAllPerfisParams) ([]TPerfi, error) {
	rows, err := q.db.Query(ctx, findAllPerfis, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TPerfi
	for rows.Next() {
		var i TPerfi
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Ativo,
			&i.AtualizadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPerfilByID = `-- name: FindPerfilByID :one
SELECT id, nome, descricao, ativo, atualizado_em FROM t_perfis WHERE id = $1
`

func (q *Queries) FindPerfilByID(ctx context.Context, id int32) (TPerfi, error) {
	row := q.db.QueryRow(ctx, findPerfilByID, id)
	var i TPerfi
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Ativo,
		&i.AtualizadoEm,
	)
	return i, err
}

const findPerfilByNome = `-- name: FindPerfilByNome :many
SELECT id, nome, descricao, ativo, atualizado_em FROM t_perfis WHERE nome ILIKE '%' || $1 || '%' AND id > $2 ORDER BY id LIMIT $3
`

type FindPerfilByNomeParams struct {
	Column1 pgtype.Text
	ID      int32
	Limit   int32
}

func (q *Queries) FindPerfilByNome(ctx context.Context, arg FindPerfilByNomeParams) ([]TPerfi, error) {
	rows, err := q.db.Query(ctx, findPerfilByNome, arg.Column1, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TPerfi
	for rows.Next() {
		var i TPerfi
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Ativo,
			&i.AtualizadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPerfilByPermissao = `-- name: FindPerfilByPermissao :many
SELECT p.id, p.nome, p.descricao, p.ativo, p.atualizado_em 
FROM t_perfis p
JOIN t_perfil_permissao pp ON p.id = pp.perfil_id
WHERE pp.permissao_id = $1
`

func (q *Queries) FindPerfilByPermissao(ctx context.Context, permissaoID int32) ([]TPerfi, error) {
	rows, err := q.db.Query(ctx, findPerfilByPermissao, permissaoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TPerfi
	for rows.Next() {
		var i TPerfi
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Ativo,
			&i.AtualizadoEm,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePerfil = `-- name: UpdatePerfil :one
UPDATE t_perfis 
SET nome = $1, descricao = $2, ativo = $3, atualizado_em = NOW()
WHERE id = $4
RETURNING id, nome, descricao, ativo, atualizado_em
`

type UpdatePerfilParams struct {
	Nome      string
	Descricao string
	Ativo     pgtype.Bool
	ID        int32
}

func (q *Queries) UpdatePerfil(ctx context.Context, arg UpdatePerfilParams) (TPerfi, error) {
	row := q.db.QueryRow(ctx, updatePerfil,
		arg.Nome,
		arg.Descricao,
		arg.Ativo,
		arg.ID,
	)
	var i TPerfi
	err := row.Scan(
		&i.ID,
		&i.Nome,
		&i.Descricao,
		&i.Ativo,
		&i.AtualizadoEm,
	)
	return i, err
}
