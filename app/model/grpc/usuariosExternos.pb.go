// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.28.2
// source: usuariosExternos.proto

package grpc

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListaUsuariosExternos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsuariosExternos []*UsuarioExterno `protobuf:"bytes,1,rep,name=usuariosExternos,proto3" json:"usuariosExternos,omitempty"`
	Meta             *Meta             `protobuf:"bytes,2,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *ListaUsuariosExternos) Reset() {
	*x = ListaUsuariosExternos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_usuariosExternos_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListaUsuariosExternos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListaUsuariosExternos) ProtoMessage() {}

func (x *ListaUsuariosExternos) ProtoReflect() protoreflect.Message {
	mi := &file_usuariosExternos_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListaUsuariosExternos.ProtoReflect.Descriptor instead.
func (*ListaUsuariosExternos) Descriptor() ([]byte, []int) {
	return file_usuariosExternos_proto_rawDescGZIP(), []int{0}
}

func (x *ListaUsuariosExternos) GetUsuariosExternos() []*UsuarioExterno {
	if x != nil {
		return x.UsuariosExternos
	}
	return nil
}

func (x *ListaUsuariosExternos) GetMeta() *Meta {
	if x != nil {
		return x.Meta
	}
	return nil
}

var File_usuariosExternos_proto protoreflect.FileDescriptor

var file_usuariosExternos_proto_rawDesc = []byte{
	0x0a, 0x16, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x67, 0x72, 0x70, 0x63, 0x1a, 0x0d,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x33, 0x74,
	0x68, 0x69, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x79, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x55, 0x73, 0x75, 0x61, 0x72,
	0x69, 0x6f, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x12, 0x40, 0x0a, 0x10, 0x75,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x52, 0x10, 0x75, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x12, 0x1e, 0x0a,
	0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x32, 0xfa, 0x0f,
	0x0a, 0x10, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x6f, 0x73, 0x12, 0x92, 0x01, 0x0a, 0x17, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x55, 0x73,
	0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x12, 0x18,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x64, 0x6f, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x61, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x6f, 0x73, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f,
	0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x6d, 0x61, 0x6e, 0x68, 0x6f, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x7d, 0x2f, 0x7b,
	0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x7d, 0x12, 0x6c, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x42, 0x79, 0x49,
	0x44, 0x12, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69,
	0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x12,
	0x24, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73,
	0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x7b, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x42, 0x79, 0x49, 0x44, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x12, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x22, 0x34, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2e, 0x12, 0x2c, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x2f, 0x7b, 0x69,
	0x64, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x18, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x75, 0x61, 0x72,
	0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x42, 0x79, 0x4e, 0x6f, 0x6d, 0x65, 0x12,
	0x11, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x6d, 0x65, 0x1a, 0x1b, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x55,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x22,
	0x4c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x46, 0x12, 0x44, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d,
	0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x6d, 0x65, 0x2f, 0x7b, 0x6e,
	0x6f, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x74, 0x61, 0x6d, 0x61, 0x6e, 0x68, 0x6f, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x7d, 0x2f, 0x7b, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x7d, 0x12, 0x8b, 0x01,
	0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x6f, 0x42, 0x79, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x12,
	0x16, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x12, 0x35, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x2f,
	0x7b, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x7d, 0x12, 0x90, 0x01, 0x0a, 0x1e,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x6f, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x12, 0x17,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x64,
	0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x22, 0x40, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x3a, 0x12, 0x38, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x64, 0x2d, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x2f, 0x7b, 0x63, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x7d, 0x12, 0x7b,
	0x0a, 0x19, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x6f, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65,
	0x72, 0x66, 0x69, 0x73, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x12, 0x2d, 0x2f, 0x73,
	0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61,
	0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x2f, 0x7b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x7d, 0x12, 0x6c, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x6f, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x75, 0x61, 0x72,
	0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x1a, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x22, 0x2a, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73,
	0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x12, 0x77, 0x0a, 0x19, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x6f, 0x54, 0x65, 0x73, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73,
	0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x1a, 0x13, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73,
	0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f, 0x73, 0x69,
	0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72,
	0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x74, 0x65, 0x73,
	0x74, 0x65, 0x12, 0x6c, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x75, 0x61,
	0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x12, 0x13, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66, 0x69, 0x73, 0x1a,
	0x13, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65,
	0x72, 0x66, 0x69, 0x73, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x1a,
	0x1f, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75,
	0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73,
	0x12, 0x76, 0x0a, 0x17, 0x44, 0x65, 0x73, 0x61, 0x74, 0x69, 0x76, 0x61, 0x72, 0x55, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x12, 0x0f, 0x2e, 0x67, 0x72,
	0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x67,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6c,
	0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x1a, 0x2e, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64,
	0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73,
	0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x64, 0x65, 0x73, 0x61, 0x74, 0x69,
	0x76, 0x61, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x12, 0x76, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x75, 0x72, 0x61, 0x72, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x6f, 0x12, 0x0f, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x64, 0x1a, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30,
	0x1a, 0x2e, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f,
	0x73, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x75, 0x72, 0x61, 0x72, 0x2f, 0x7b, 0x69, 0x64, 0x7d,
	0x12, 0x62, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63,
	0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x1a, 0x13, 0x2e,
	0x67, 0x72, 0x70, 0x63, 0x2e, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x50, 0x65, 0x72, 0x66,
	0x69, 0x73, 0x22, 0x30, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2a, 0x3a, 0x01, 0x2a, 0x22, 0x25, 0x2f,
	0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x80, 0x01, 0x0a, 0x0f, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x68, 0x61, 0x12, 0x10, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x1a, 0x1d, 0x2e, 0x67, 0x72, 0x70,
	0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x68, 0x61, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2d, 0x72, 0x65, 0x73, 0x65,
	0x74, 0x2d, 0x73, 0x65, 0x6e, 0x68, 0x61, 0x12, 0x71, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x53, 0x65, 0x6e, 0x68, 0x61, 0x12, 0x17, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x6e, 0x68, 0x61, 0x55, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x1a, 0x12,
	0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f,
	0x6f, 0x6c, 0x22, 0x36, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x30, 0x3a, 0x01, 0x2a, 0x1a, 0x2b, 0x2f,
	0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x72,
	0x65, 0x73, 0x65, 0x74, 0x2d, 0x73, 0x65, 0x6e, 0x68, 0x61, 0x12, 0x8d, 0x01, 0x0a, 0x13, 0x41,
	0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x53, 0x65, 0x6e, 0x68, 0x61, 0x55, 0x73, 0x75, 0x61, 0x72,
	0x69, 0x6f, 0x12, 0x20, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x53, 0x65, 0x6e, 0x68, 0x61, 0x55, 0x73, 0x75,
	0x61, 0x72, 0x69, 0x6f, 0x1a, 0x12, 0x2e, 0x67, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3a,
	0x3a, 0x01, 0x2a, 0x1a, 0x35, 0x2f, 0x73, 0x69, 0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x73, 0x2d, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x6f, 0x73, 0x2f, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x61, 0x72, 0x2d, 0x73, 0x65, 0x6e,
	0x68, 0x61, 0x2d, 0x75, 0x73, 0x75, 0x61, 0x72, 0x69, 0x6f, 0x42, 0x13, 0x5a, 0x11, 0x73, 0x69,
	0x2d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_usuariosExternos_proto_rawDescOnce sync.Once
	file_usuariosExternos_proto_rawDescData = file_usuariosExternos_proto_rawDesc
)

func file_usuariosExternos_proto_rawDescGZIP() []byte {
	file_usuariosExternos_proto_rawDescOnce.Do(func() {
		file_usuariosExternos_proto_rawDescData = protoimpl.X.CompressGZIP(file_usuariosExternos_proto_rawDescData)
	})
	return file_usuariosExternos_proto_rawDescData
}

var file_usuariosExternos_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_usuariosExternos_proto_goTypes = []any{
	(*ListaUsuariosExternos)(nil),      // 0: grpc.ListaUsuariosExternos
	(*UsuarioExterno)(nil),             // 1: grpc.UsuarioExterno
	(*Meta)(nil),                       // 2: grpc.Meta
	(*RequestAllPaginado)(nil),         // 3: grpc.RequestAllPaginado
	(*RequestId)(nil),                  // 4: grpc.RequestId
	(*RequestNome)(nil),                // 5: grpc.RequestNome
	(*RequestDocumento)(nil),           // 6: grpc.RequestDocumento
	(*RequestCodReserva)(nil),          // 7: grpc.RequestCodReserva
	(*RequestEmail)(nil),               // 8: grpc.RequestEmail
	(*UsuarioPerfis)(nil),              // 9: grpc.UsuarioPerfis
	(*LoginUsuario)(nil),               // 10: grpc.LoginUsuario
	(*EmailReset)(nil),                 // 11: grpc.EmailReset
	(*ResetSenhaUsuario)(nil),          // 12: grpc.ResetSenhaUsuario
	(*RequestAlterarSenhaUsuario)(nil), // 13: grpc.RequestAlterarSenhaUsuario
	(*ResponseBool)(nil),               // 14: grpc.ResponseBool
	(*ResponseTokenResetSenha)(nil),    // 15: grpc.ResponseTokenResetSenha
}
var file_usuariosExternos_proto_depIdxs = []int32{
	1,  // 0: grpc.ListaUsuariosExternos.usuariosExternos:type_name -> grpc.UsuarioExterno
	2,  // 1: grpc.ListaUsuariosExternos.meta:type_name -> grpc.Meta
	3,  // 2: grpc.UsuariosExternos.FindAllUsuariosExternos:input_type -> grpc.RequestAllPaginado
	4,  // 3: grpc.UsuariosExternos.FindUsuarioExternoByID:input_type -> grpc.RequestId
	4,  // 4: grpc.UsuariosExternos.FindUsuarioExternoByIDExterno:input_type -> grpc.RequestId
	5,  // 5: grpc.UsuariosExternos.FindUsuarioExternoByNome:input_type -> grpc.RequestNome
	6,  // 6: grpc.UsuariosExternos.FindUsuarioExternoByDocumento:input_type -> grpc.RequestDocumento
	7,  // 7: grpc.UsuariosExternos.FindUsuarioExternoByCodReserva:input_type -> grpc.RequestCodReserva
	8,  // 8: grpc.UsuariosExternos.FindUsuarioExternoByEmail:input_type -> grpc.RequestEmail
	9,  // 9: grpc.UsuariosExternos.CreateUsuarioExterno:input_type -> grpc.UsuarioPerfis
	9,  // 10: grpc.UsuariosExternos.CreateUsuarioExternoTeste:input_type -> grpc.UsuarioPerfis
	9,  // 11: grpc.UsuariosExternos.UpdateUsuarioExterno:input_type -> grpc.UsuarioPerfis
	4,  // 12: grpc.UsuariosExternos.DesativarUsuarioExterno:input_type -> grpc.RequestId
	4,  // 13: grpc.UsuariosExternos.RestaurarUsuarioExterno:input_type -> grpc.RequestId
	10, // 14: grpc.UsuariosExternos.Login:input_type -> grpc.LoginUsuario
	11, // 15: grpc.UsuariosExternos.TokenResetSenha:input_type -> grpc.EmailReset
	12, // 16: grpc.UsuariosExternos.ResetSenha:input_type -> grpc.ResetSenhaUsuario
	13, // 17: grpc.UsuariosExternos.AlterarSenhaUsuario:input_type -> grpc.RequestAlterarSenhaUsuario
	0,  // 18: grpc.UsuariosExternos.FindAllUsuariosExternos:output_type -> grpc.ListaUsuariosExternos
	9,  // 19: grpc.UsuariosExternos.FindUsuarioExternoByID:output_type -> grpc.UsuarioPerfis
	9,  // 20: grpc.UsuariosExternos.FindUsuarioExternoByIDExterno:output_type -> grpc.UsuarioPerfis
	0,  // 21: grpc.UsuariosExternos.FindUsuarioExternoByNome:output_type -> grpc.ListaUsuariosExternos
	9,  // 22: grpc.UsuariosExternos.FindUsuarioExternoByDocumento:output_type -> grpc.UsuarioPerfis
	9,  // 23: grpc.UsuariosExternos.FindUsuarioExternoByCodReserva:output_type -> grpc.UsuarioPerfis
	9,  // 24: grpc.UsuariosExternos.FindUsuarioExternoByEmail:output_type -> grpc.UsuarioPerfis
	9,  // 25: grpc.UsuariosExternos.CreateUsuarioExterno:output_type -> grpc.UsuarioPerfis
	9,  // 26: grpc.UsuariosExternos.CreateUsuarioExternoTeste:output_type -> grpc.UsuarioPerfis
	9,  // 27: grpc.UsuariosExternos.UpdateUsuarioExterno:output_type -> grpc.UsuarioPerfis
	14, // 28: grpc.UsuariosExternos.DesativarUsuarioExterno:output_type -> grpc.ResponseBool
	14, // 29: grpc.UsuariosExternos.RestaurarUsuarioExterno:output_type -> grpc.ResponseBool
	9,  // 30: grpc.UsuariosExternos.Login:output_type -> grpc.UsuarioPerfis
	15, // 31: grpc.UsuariosExternos.TokenResetSenha:output_type -> grpc.ResponseTokenResetSenha
	14, // 32: grpc.UsuariosExternos.ResetSenha:output_type -> grpc.ResponseBool
	14, // 33: grpc.UsuariosExternos.AlterarSenhaUsuario:output_type -> grpc.ResponseBool
	18, // [18:34] is the sub-list for method output_type
	2,  // [2:18] is the sub-list for method input_type
	2,  // [2:2] is the sub-list for extension type_name
	2,  // [2:2] is the sub-list for extension extendee
	0,  // [0:2] is the sub-list for field type_name
}

func init() { file_usuariosExternos_proto_init() }
func file_usuariosExternos_proto_init() {
	if File_usuariosExternos_proto != nil {
		return
	}
	file_modelos_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_usuariosExternos_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*ListaUsuariosExternos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_usuariosExternos_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_usuariosExternos_proto_goTypes,
		DependencyIndexes: file_usuariosExternos_proto_depIdxs,
		MessageInfos:      file_usuariosExternos_proto_msgTypes,
	}.Build()
	File_usuariosExternos_proto = out.File
	file_usuariosExternos_proto_rawDesc = nil
	file_usuariosExternos_proto_goTypes = nil
	file_usuariosExternos_proto_depIdxs = nil
}
